```
3. Detroit
```{r}
intensityDataDetroit <- read.csv("Detroit/2015.csv", header = T, sep=",")
intensityDFDetroit <- as.data.frame(intensityDataDetroit)
NeighborhoodsDetroit <- readOGR(dsn = '/Users/ArjunHandeMac/Desktop/BigData/Project/ResultData/Detroit/DetroitPolicePrecincts',
layer = 'DPD_Police_Precincts')
NeighborhoodsDetroit <- spTransform(NeighborhoodsDetroit, CRS("+proj=longlat +datum=WGS84"))
NeighborhoodsDetroit@data$id <- rownames(NeighborhoodsDetroit@data)
NeighborhoodsDetroit.df <- fortify(NeighborhoodsDetroit)
NeighborhoodsDetroit.df <- join(NeighborhoodsDetroit.df, NeighborhoodsDetroit@data, by="id")
NeighborhoodsDetroit.df <- merge(NeighborhoodsDetroit.df, intensityDFDetroit, by.x="Precinct", by.y="Precinct", all.x=T, a..ly=F)
precinctCentres <- data.frame(precinct= numeric(0), lat_centre = numeric(0), long_centre = numeric(0))
for(k in 1:123) {
temp_lat2 = mean(NeighborhoodsDetroit.df$lat[NeighborhoodsDetroit.df$Precinct == k])
temp_lon2 = mean(NeighborhoodsDetroit.df$long[NeighborhoodsDetroit.df$Precinct == k])
newrow1 <- data.frame(precinct = k, lat_centre = temp_lat2, long_centre = temp_lon2)
if(!is.nan(NeighborhoodsDetroit.df$CrimeIntensity))
precinctCentres = rbind(precinctCentres, newrow1)
}
DetroitMap = map = get_map(location = "Detroit" , zoom = 11, maptype = "terrain")
ggmap(DetroitMap) +
geom_polygon(aes(fill = CrimeIntensity, x = long, y = lat, group = group),
data = NeighborhoodsDetroit.df,
alpha = 0.8,
color = "black",
size = 0.2) +
scale_fill_gradient(low = "green", high = "red") +
geom_text(aes(x=long_centre,y=lat_centre,label=precinct), data = precinctCentres, size=4)
```
You can also embed plots, for example:
```{r, echo=FALSE}
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
library(ggplot2)
library(maps)
loanbook <- read.csv(file.choose(), header=TRUE)
dim(loanbook)
colnames(loanbook)
dim(loanbook)
colnames(loanbook)
str(loanbook)
summary(loanbook)
Desc(loanbook$PERIOD_END_LSTAT, plotit = T)
Desc(loanbook$PERIOD_END_LSTAT, plotit = T)
install.packages("desc")
library(ggplot2)
library(maps)
library(dplyr)
library(desc)
loanbook <- read.csv(file.choose(), header=TRUE)
dim(loanbook)
colnames(loanbook)
str(loanbook)
summary(loanbook)
Desc(loanbook$PERIOD_END_LSTAT, plotit = T)
desc(loanbook$PERIOD_END_LSTAT, plotit = T)
state_by_value <-loanbook %>% group_by(region) %>%
summarise(value = sum(PBAL_BEG_PERIOD, na.rm=TRUE))
state_choropleth(state_by_value, title = "Value by State")
state_by_value <-loanbook %>% group_by(state) %>%
summarise(value = sum(PBAL_BEG_PERIOD, na.rm=TRUE))
state_by_value <-loanbook %>% group_by(region) %>%
summarise(value = sum(PBAL_BEG_PERIOD, na.rm=TRUE))
state_by_value <-loanbook %>% group_by(region) %>%
summarise(value = sum(PBAL_BEG_PERIOD, na.rm=TRUE))
state_by_value <-loanbook %>% group_by(region) %>%
summarise(value = sum(PBAL_BEG_PERIOD, na.rm=TRUE))
state_choropleth(state_by_value, title = "Value by State")
state_by_volume <-loanbook %>% group_by(region) %>%
summarise(value = n())
state_choropleth(state_by_volume, title = "Volume by State")
library(choropethr)
install.packages("choroplethr")
library(ggplot2)
library(maps)
library(dplyr)
library(desc)
library(choropethr)
loanbook <- read.csv(file.choose(), header=TRUE)
dim(loanbook)
colnames(loanbook)
str(loanbook)
summary(loanbook)
state_by_value <-loanbook %>% group_by(region) %>%
summarise(value = sum(PBAL_BEG_PERIOD, na.rm=TRUE))
state_choropleth(state_by_value, title = "Value by State")
state_by_volume <-loanbook %>% group_by(region) %>%
summarise(value = n())
state_choropleth(state_by_volume, title = "Volume by State")
library(ggplot2)
library(maps)
library(dplyr)
library(desc)
library(choroplethr)
loanbook <- read.csv(file.choose(), header=TRUE)
dim(loanbook)
colnames(loanbook)
str(loanbook)
summary(loanbook)
state_by_value <-loanbook %>% group_by(region) %>%
summarise(value = sum(PBAL_BEG_PERIOD, na.rm=TRUE))
state_choropleth(state_by_value, title = "Value by State")
state_by_volume <-loanbook %>% group_by(region) %>%
summarise(value = n())
state_choropleth(state_by_volume, title = "Volume by State")
library(ggplot2)
library(maps)
library(dplyr)
library(desc)
library(choroplethrAdmin1)
loanbook <- read.csv(file.choose(), header=TRUE)
dim(loanbook)
colnames(loanbook)
str(loanbook)
summary(loanbook)
state_by_value <-loanbook %>% group_by(region) %>%
summarise(value = sum(PBAL_BEG_PERIOD, na.rm=TRUE))
state_choropleth(state_by_value, title = "Value by State")
state_by_volume <-loanbook %>% group_by(region) %>%
summarise(value = n())
state_choropleth(state_by_volume, title = "Volume by State")
install.packages("choroplethrMaps")
library(ggplot2)
library(maps)
library(dplyr)
library(desc)
library(choroplethrAdmin1)
loanbook <- read.csv(file.choose(), header=TRUE)
dim(loanbook)
colnames(loanbook)
str(loanbook)
summary(loanbook)
state_by_value <-loanbook %>% group_by(region) %>%
summarise(value = sum(PBAL_BEG_PERIOD, na.rm=TRUE))
state_choropleth(state_by_value, title = "Value by State")
state_by_volume <-loanbook %>% group_by(region) %>%
summarise(value = n())
state_choropleth(state_by_volume, title = "Volume by State")
install.packages("choroplethrMaps")
library(ggplot2)
library(maps)
library(dplyr)
library(desc)
library(choroplethr)
loanbook <- read.csv(file.choose(), header=TRUE)
amnt_df <- loanbook %>%
select(State, PBAL_BEG_PERIOD) %>%
group_by(State) %>%
summarise(Amount = sum(PBAL_BEG_PERIOD))
ts_amnt <- ggplot(amnt_df,
aes(x = State, y = Amount))
ts_amnt + geom_line() + xlab("State")
library(dplyr)
library(ggplot)
library(DescTools)
loanbook <- read.csv(file.choose(), header=TRUE)
dim(loanbook)
colnames(loanbook)
str(loanbook)
summary(loanbook)
#Desc(loanbook$State, main = "Loan amount distribution over Different States", plotit = TRUE)
#loanbook$IssuedDate <- as.Date(gsub("^", "01-", loanbook$IssuedDate), format="%d-%b-%Y")
amnt_df <- loanbook %>%
select(State, PBAL_BEG_PERIOD) %>%
group_by(State) %>%
summarise(Amount = sum(PBAL_BEG_PERIOD))
ts_amnt <- ggplot(amnt_df,
aes(x = State, y = Amount))
ts_amnt + geom_line() + xlab("State")
amnt_df <- loanbook %>%
select(State, PBAL_BEG_PERIOD) %>%
group_by(State) %>%
summarise(Amount = sum(PBAL_BEG_PERIOD))
ts_amnt <- ggplot2(amnt_df,
aes(x = State, y = Amount))
ts_amnt + geom_line() + xlab("State")
library(dplyr)
library(ggplot2)
library(DescTools)
loanbook <- read.csv(file.choose(), header=TRUE)
dim(loanbook)
colnames(loanbook)
str(loanbook)
summary(loanbook)
#Desc(loanbook$State, main = "Loan amount distribution over Different States", plotit = TRUE)
#loanbook$IssuedDate <- as.Date(gsub("^", "01-", loanbook$IssuedDate), format="%d-%b-%Y")
amnt_df <- loanbook %>%
select(State, PBAL_BEG_PERIOD) %>%
group_by(State) %>%
summarise(Amount = sum(PBAL_BEG_PERIOD))
ts_amnt <- ggplot2(amnt_df,
aes(x = State, y = Amount))
ts_amnt + geom_line() + xlab("State")
amnt_df <- loanbook %>%
select(State, PBAL_BEG_PERIOD) %>%
group_by(State) %>%
summarise(Amount = sum(PBAL_BEG_PERIOD))
ts_amnt <- qplot(amnt_df,
aes(x = State, y = Amount))
ts_amnt + geom_line() + xlab("State")
amnt_df <- loanbook %>%
select(State, PBAL_BEG_PERIOD) %>%
group_by(State) %>%
summarise(Amount = sum(PBAL_BEG_PERIOD))
ts_amnt <- ggplot(amnt_df,
aes(x = State, y = Amount))
ts_amnt + geom_line() + xlab("State")
yes
y
amnt_df <- loanbook %>%
select(State, PBAL_BEG_PERIOD) %>%
group_by(State) %>%
summarise(Amount = sum(PBAL_BEG_PERIOD))
ts_amnt <- ggplot(amnt_df,
aes(x = State, y = Amount))
ts_amnt + geom_line() + xlab("State")
amnt_df_grade <- loanbook %>%
select(IssuedDate, PBAL_BEG_PERIOD, grade) %>%
group_by(IssuedDate, grade) %>%
summarise(Amount = sum(loan_amnt))
ts_amnt_grade <- ggplot(amnt_df_grade,
aes(x = issue_d, y = Amount))
ts_amnt_grade + geom_area(aes(fill=grade)) + xlab("Date issued")
amnt_df_grade <- loanbook %>%
select(IssuedDate, PBAL_BEG_PERIOD, grade) %>%
group_by(IssuedDate, grade) %>%
summarise(Amount = sum(PBAL_BEG_PERIOD))
ts_amnt_grade <- ggplot(amnt_df_grade,
aes(x = IssuedDate, y = Amount))
ts_amnt_grade + geom_area(aes(fill=grade)) + xlab("Date issued")
loanbook$IssuedDate <- as.Date(gsub("^", "01-", loanbook$IssuedDate), format="%d-%b-%Y")
amnt_df_grade <- loanbook %>%
select(IssuedDate, PBAL_BEG_PERIOD, grade) %>%
group_by(IssuedDate, grade) %>%
summarise(Amount = sum(PBAL_BEG_PERIOD))
ts_amnt_grade <- ggplot(amnt_df_grade,
aes(x = IssuedDate, y = Amount))
ts_amnt_grade + geom_area(aes(fill=grade)) + xlab("Date issued")
loanbook$IssuedDate <- as.Date(gsub("^", "01-", loanbook$IssuedDate), format="%d-%b")
amnt_df_grade <- loanbook %>%
select(IssuedDate, PBAL_BEG_PERIOD, grade) %>%
group_by(IssuedDate, grade) %>%
summarise(Amount = sum(PBAL_BEG_PERIOD))
ts_amnt_grade <- ggplot(amnt_df_grade,
aes(x = IssuedDate, y = Amount))
ts_amnt_grade + geom_area(aes(fill=grade)) + xlab("Date issued")
loanbook$IssuedDate <- as.Date(gsub("^", "01-", loanbook$IssuedDate), format="%d-%b-%Y")
amnt_df <- loanbook %>%
select(State, PBAL_BEG_PERIOD) %>%
group_by(State) %>%
summarise(Amount = sum(PBAL_BEG_PERIOD))
ts_amnt <- ggplot(amnt_df,
aes(x = State, y = Amount))
ts_amnt + geom_line() + xlab("State")
loanbook$IssuedDate <- as.Date(gsub("^", "01-", loanbook$IssuedDate), format="%d-%b-%Y")
amnt_df <- loanbook %>%
select(IssuedDate, PBAL_BEG_PERIOD) %>%
group_by(IssuedDate) %>%
summarise(Amount = sum(PBAL_BEG_PERIOD))
ts_amnt <- ggplot(amnt_df,
aes(x = IssuedDate, y = Amount))
ts_amnt + geom_line() + xlab("State")
loanbook$IssuedDate <- as.Date(gsub("^", loanbook$IssuedDate), format="%d-%b-%Y")
amnt_df <- loanbook %>%
select(IssuedDate, PBAL_BEG_PERIOD) %>%
group_by(IssuedDate) %>%
summarise(Amount = sum(PBAL_BEG_PERIOD))
ts_amnt <- ggplot(amnt_df,
aes(x = IssuedDate, y = Amount))
ts_amnt + geom_line() + xlab("State")
loanbook$IssuedDate <- as.Date(gsub("^", loanbook$IssuedDate), format="%d-%b")
amnt_df <- loanbook %>%
select(IssuedDate, PBAL_BEG_PERIOD) %>%
group_by(IssuedDate) %>%
summarise(Amount = sum(PBAL_BEG_PERIOD))
ts_amnt <- ggplot(amnt_df,
aes(x = IssuedDate, y = Amount))
ts_amnt + geom_line() + xlab("State")
loanbook$IssuedDate <- as.Date(gsub("^", "01-", loanbook$IssuedDate), format="%b")
amnt_df_grade <- loanbook %>%
select(IssuedDate, PBAL_BEG_PERIOD, grade) %>%
group_by(IssuedDate, grade) %>%
summarise(Amount = sum(PBAL_BEG_PERIOD))
ts_amnt_grade <- ggplot(amnt_df_grade,
aes(x = IssuedDate, y = Amount))
ts_amnt_grade + geom_area(aes(fill=grade)) + xlab("Date issued")
loanbook$IssuedDate <- as.Date(gsub(loanbook$IssuedDate), format="%d-%b-%Y")
amnt_df_grade <- loanbook %>%
select(IssuedDate, PBAL_BEG_PERIOD, grade) %>%
group_by(IssuedDate, grade) %>%
summarise(Amount = sum(PBAL_BEG_PERIOD))
ts_amnt_grade <- ggplot(amnt_df_grade,
aes(x = IssuedDate, y = Amount))
ts_amnt_grade + geom_area(aes(fill=grade)) + xlab("Date issued")
state_by_value <-
loanbook %>% group_by(State) %>%
summarise(value = sum(PBAL_BEG_PERIOD, na.rm=TRUE))
state_choropleth(state_by_value, title = "Value by State")
state_by_value <-
loanbook %>% group_by(State) %>%
summarise(value = sum(PBAL_BEG_PERIOD, na.rm=TRUE))
state_choropleth(state_by_value, title = "Value by State")
state_by_value <-
loanbook %>% group_by(State) %>%
summarise(value = sum(PBAL_BEG_PERIOD, na.rm=TRUE))
state_choropleth(state_by_value, title = "Value by State")
mydata[mydata$State == 'CA',]
data.frame(table(mydata$State))
mydata[mydata$State == 'CA',]
data.frame(table(mydata$State))
name=c(Var1)
feature=paste("feature ", c(Freq) , sep="")
dat <- data.frame(name,feature)
dat <- with(dat, table(name, feature))
library(ggplot2)
location <- c(0, 0, 0, -2)
scale <- c(0.5, 1, 2, 1)
x <- seq(-5, 5, by = 0.1)
cauchy_data <- Map(function(l, s) dcauchy(x, l, s), location, scale)
names(cauchy_data) <- paste0("cauchy", seq_along(location))
cauchy_tab <- data.frame(x = x, cauchy_data)
head(cauchy_tab)
curve_labs <- paste(paste("x0 = ", location), paste("gamma = ", scale), sep = ", ")
plot_data <- gather(cauchy_tab, key = curve, value = "P", -x )
ggplot(plot_data, aes(x = x, y = P, colour = curve)) + geom_line() +
scale_colour_discrete(labels = curve_labs)
ggplot(data.frame(x = c(-5, 5)), aes(x)) +
stat_function(fun = dcauchy, n = 1e3, args = list(location = 0, scale = 0.5), aes(color = "a"), size = 2) +
stat_function(fun = dcauchy, n = 1e3, args = list(location = 0, scale = 1), aes(color = "b"), size = 2) +
stat_function(fun = dcauchy, n = 1e3, args = list(location = 0, scale = 2), aes(color = "c"), size = 2) +
stat_function(fun = dcauchy, n = 1e3, args = list(location = -2, scale = 1), aes(color = "d"), size = 2) +
scale_x_continuous(expand = c(0, 0)) +
scale_color_discrete(name = "",
labels = c("a" = expression(x[0] == 0*","~ gamma == 0.5),
"b" = expression(x[0] == 0*","~ gamma == 1),
"c" = expression(x[0] == 0*","~ gamma == 2),
"d" = expression(x[0] == -2*","~ gamma == 1))) +
ylab("P(x)") +
theme_bw(base_size = 24) +
theme(legend.position = c(0.8, 0.8),
legend.text.align = 0)
ggplot(data.frame(x = c(-4, 4)), aes(x)) +
stat_function(fun = dcauchy, n = 1e3, args = list(location = 0, scale = 0.5), aes(color = "a"), size = 2) +
stat_function(fun = dcauchy, n = 1e3, args = list(location = 0, scale = 1), aes(color = "b"), size = 2) +
stat_function(fun = dcauchy, n = 1e3, args = list(location = 0, scale = 2), aes(color = "c"), size = 2) +
stat_function(fun = dcauchy, n = 1e3, args = list(location = -2, scale = 1), aes(color = "d"), size = 2) +
scale_x_continuous(expand = c(0, 0)) +
scale_color_discrete(name = "",
labels = c("a" = expression(x[0] == 0*","~ gamma == 0.5),
"b" = expression(x[0] == 0*","~ gamma == 1),
"c" = expression(x[0] == 0*","~ gamma == 2),
"d" = expression(x[0] == -2*","~ gamma == 1))) +
ylab("P(x)") +
theme_bw(base_size = 24) +
theme(legend.position = c(0.8, 0.8),
legend.text.align = 0)
ggplot(data.frame(x = c(-5, 5)), aes(x)) +
stat_function(fun = dcauchy, n = 1e3, args = list(location = 0, scale = 0.5), aes(color = "a"), size = 2) +
stat_function(fun = dcauchy, n = 1e3, args = list(location = 0, scale = 1), aes(color = "b"), size = 2) +
stat_function(fun = dcauchy, n = 1e3, args = list(location = 0, scale = 2), aes(color = "c"), size = 2) +
stat_function(fun = dcauchy, n = 1e3, args = list(location = -2, scale = 1), aes(color = "d"), size = 2) +
scale_x_continuous(expand = c(0, 0)) +
scale_color_discrete(name = "",
labels = c("a" = expression(x[0] == 0*","~ gamma == 0.5),
"b" = expression(x[0] == 0*","~ gamma == 1),
"c" = expression(x[0] == 0*","~ gamma == 2),
"d" = expression(x[0] == -2*","~ gamma == 1))) +
ylab("P(x)") +
theme_bw(base_size = 24) +
theme(legend.position = c(0.8, 0.8),
legend.text.align = 0)
setwd("~/Udemy/ML/Data_Preprocessing")
#Importing the dataset
dataset = read.csv("Data.csv")
View(dataset)
View(dataset)
#Missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x), mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age,FUN = function(x),mean(x,na.rm = TRUE)),
dataset$Age)
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age,FUN = function(x),mean(x,na.rm = TRUE)),
dataset$Age)
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
View(dataset)
View(dataset)
dataset$Country = factor(dataset$Country,
levels = c("France", "Spain", "Germany"),
labels = c(1,2,3))
View(dataset)
View(dataset)
dataset$Country = factor(dataset$Country,
levels = c("France", "Spain", "Germany"),
labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,
levels = c("NO", "Yes"),
labels = c(0,1))
#Categorical Data
dataset$Country = factor(dataset$Country,
levels = c("France", "Spain", "Germany"),
labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,
levels = c("No", "Yes"),
labels = c(0,1))
#DataPreprocessing
#Importing the dataset
dataset = read.csv("Data.csv")
#Missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#Categorical Data
dataset$Country = factor(dataset$Country,
levels = c("France", "Spain", "Germany"),
labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,
levels = c("No", "Yes"),
labels = c(0, 1))
library("caTools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
#Splitting into Training and Test sets
library(caTools)
#Splitting into Training and Test sets
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
split
#Splitting into Training and Test sets
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
View(training_set)
View(training_set)
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
setwd("~/Udemy/ML/Regression/Simple_Linear_Regression")
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
#fitting simple linear regression to the training model
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
summary(regressor)
#Predicting the test set results
y_pred = predict(regressor, newdata = test_set)
y_pred
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(ggplot2)
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y= training_set$Salary),
color = "red") +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = test_set)),
color = "blue") +
ggtitle("Salary VS Experience (Training_Set)" ) +
xlab("YearsExperience") +
ylab("Salary")
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y= training_set$Salary),
color = "red") +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
color = "blue") +
ggtitle("Salary VS Experience (Training_Set)" ) +
xlab("YearsExperience") +
ylab("Salary")
library(ggplot2)
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y= test_set$Salary),
color = "red") +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
color = "blue") +
ggtitle("Salary VS Experience (Test_Set)" ) +
xlab("YearsExperience") +
ylab("Salary")
